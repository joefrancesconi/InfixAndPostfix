/*
 * Name: Joe Francesconi
 * Date Submitted: 2/10/22
 * Lab Section: 005
 * Assignment Name: Infix to Postfix
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

//Checks input for operators
bool isOp(string);
//Checks input for numbers
bool isVal(string);
//declares precedence
int prec(string);
//Checks for precedence bewtween two strings
bool opPrecedence(string, string);

//Converts infix to postfix
int infixToPostfix(string infix[], int length, string postfix[])
{
    stack<string> stringStack;
    string s;
    int c1 = 0, c2 = 0, c3 = 0;
    
    for (int i = 0; i < length; i++){
        s = infix[i];
        if (s == "("){
            c1++;
        }else if (s == ")"){
            c2++;
        }else if (c2 > c1){
            return 0;
        }
    }
    if (c1 != c2){
        return 0;
    }
    for (int i = 0; i < length; i++){
        s = infix[i];
        
        if (s == " "){
            continue;
        }else if (s == "("){
            stringStack.push(s);
        }else if (isVal(s)){
            postfix[c3] = s;
            c3++;
        }else if (isOp(s)){
            while (!stringStack.empty() && opPrecedence(stringStack.top(), s)) {
                postfix[c3] = stringStack.top();
                c3++;
                stringStack.pop();
            }
            stringStack.push(s);
        }else if (s == ")"){
            while (!stringStack.empty() && stringStack.top() != "("){
                postfix[c3] = stringStack.top();
                c3++;
                stringStack.pop();
            }
            stringStack.pop();
        }
            
    }
    while (!stringStack.empty()){
        postfix[c3] = stringStack.top();
        c3++;
        stringStack.pop();
    }
    return c3;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}

//Checks input for operators
bool isOp(string input){
    if (input == "+" || input == "-" || input == "/" || input == "*" || input == "%"){
        return true;
    }
    return false;
}

//Checks input for numbers
bool isVal(string input){
    if (input[0] >= '0' && input[0] <= '9'){
        return true;
    }
    return false;
}

//declares precedence
int prec(string o){
    if (o == "+" || o == "-"){
        return 1;
    }
    if (o == "*" || o == "/" || o == "%"){
        return 2;
    }
    return 0;
}

//Checks for precedence
bool opPrecedence(string operator0, string operator1){
    int val0, val1;
    val0 = prec(operator0);
    val1 = prec(operator1);
    
    if (val0 >= val1){
        return true;
    }
    return false;
}

